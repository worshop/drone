—————————————————————————————————————————-

Windsurf IDE Workspace 규칙

1. 프로젝트 개요

이 프로젝트는 Python을 사용하여 MAVLink 데이터를 처리하고, Tkinter와 TkinterMapView를 활용해 지도 기반 GUI 애플리케이션을 구축합니다. MAVLink 데이터는 14560 포트로 수신하며, 드론을 실시간으로 화살표 마커를 사용합니다. UI는 왼쪽 10%, 가운데 80%, 오른쪽 10% 비율로 레이아웃을 구성합니다.

2. 파일 및 폴더 구조

루트 디렉토리: /home/dronedev/new_pymavlink

파일:

gcs.py: 메인 Python 파일로, 애플리케이션의 핵심 로직 포함.

main.py: 기본적인 작동 코드만 포함 (최소화).

mavlink_handler.py: MAVLink 데이터 처리 전용 모듈.

중복코드 : 중복 코드 회피

폴더:

images/: 이미지 파일 저장 (예: 아이콘, 배경 이미지 등).

plugs/: 외부 플러그인 저장.

3. 사용 라이브러리

다음 라이브러리를 사용하며, requirements.txt에 명시합니다:

tkinter: GUI 구축.

tkintermapview: 지도 시각화.

pymavlink: pymavlink 

pillow: 이미지 처리 (PIL 모듈).

모든 의존성은 requirements.txt에 최신 호환 버전으로 기록.

예시:

import tkinter as tk

from tkintermapview import TkinterMapView

from pymavlink import mavutil

import threading

import time

import os

from PIL import Image, ImageTk

import tkinter as tk

from tkinter import filedialog

4. 코드 작성 규칙

언어: Python 3.x.

주석: 모든 주석은 한글로 작성.

코드 재사용성:

공통 기능은 mavlink_handler.py와 같은 별도 모듈로 분리.

재사용 가능한 함수/클래스는 명확한 이름과 문서화된 주석 포함.

중복 코드는 최대한 피하고, 모듈화된 구조 사용.

명명 규칙:

파일/폴더: 소문자와 언더스코어 사용 (예: mavlink_handler.py).

함수/변수: PEP 8 준수, 명확하고 설명적인 이름.

에러 처리: 예외 처리를 통해 안정성 보장.

의존성 관리: requirements.txt에 정확한 버전 명시.

5. MAVLink 설정

포트: 14560 (UDP)으로 MAVLink 데이터 수신.

처리: mavlink_handler.py에서 데이터 수신, 파싱, 처리 로직 구현.

마커: 지도에서 화살표 마커 사용 (TkinterMapView의 마커 기능 활용).

위치: GCS신호를 14560포트로 전달받아서 마커를 표시

시뮬레이텨: ./arducopter -S --model copter --speedup 3 --defaults parameters/copter.parm -I0 --home 36.5960,126.2922,0,0

6. UI 레이아웃

구성:

왼쪽 패널 (10%) 작동기능: 시동,이륙(고도m설정), 비행모드선택, 홈으로, 착륙, 미션설정   등.

가운데 패널 (80%) 지도표시: TkinterMapView로 지도 표시, MAVLink 데이터 시각화, 드론을 마커로 표시, 초기화면 으로 설정

오른쪽 패널 (10%) 상태표시:  GPS좌표 , GPS상태, 고도 , 홈과의 거리, 이동한거리, 

비율 구현: Tkinter의 pack, grid, 또는 place 레이아웃 매니저 사용.

이미지 처리:

images/ 폴더의 이미지를 PIL로 로드 후 ImageTk로 Tkinter에 통합.

이미지 파일명은 명확하고 용도별로 정리 (예: arrow_marker.png).

지도가 깜박이지 않게

7. 모듈별 역할

main.py:

애플리케이션 초기화 및 실행.

최소한의 코드로 gcs.py 호출.

예시:# main.py

# 애플리케이션 실행 진입점

from gcs import run_app

if __name__ == "__main__":

    run_app()

gcs.py:

메인 애플리케이션 로직.

Tkinter GUI 초기화, 레이아웃 구성, TkinterMapView 통합.

mavlink_handler.py 호출로 데이터 처리.

mavlink_handler.py:

MAVLink 연결 설정 (14560 포트).

데이터 수신/파싱 및 지도에 반영.

스레딩(threading)으로 비동기 처리.

images/:

화살표 마커 이미지 등 저장.

PIL로 로드 후 ImageTk로 GUI에 통합.

plugs/:

외부 플러그인 관리.

플러그인 로드는 gcs.py에서 동적으로 처리.

8. 구현 세부사항

스레딩:

MAVLink 데이터 수신은 threading.Thread로 별도 스레드에서 실행.

Tkinter 이벤트 루프와 충돌 방지를 위해 time.sleep 최소화.

파일 선택:

tkinter.filedialog로 이미지/플러그인 파일 선택 기능 제공.

의존성 설치:

requirements.txt 

예시:tkintermapview==2.0.0

pymavlink==2.4.40

Pillow==10.4.0

설치 명령: pip install -r requirements.txt.

실행:

python main.py로 애플리케이션 시작.

gcs.py에서 GUI 및 MAVLink 처리 시작.

9. 추가 고려사항

보안:

외부 플러그인(plugs/) 로드 시 안전성 검증.

MAVLink 데이터 처리 시 입력 유효성 검사.

확장성:

새로운 플러그인 추가를 위한 모듈 로더 구현.

코드 재사용을 위해 클래스/함수 분리 철저히.

디버깅:

mavlink_handler.py에 로깅 추가 (예: logging 모듈 사용).

Tkinter 오류는 콘솔에 출력.

10. 작업 흐름

images/와 plugs/ 폴더 생성.

requirements.txt 작성 및 의존성 설치.

mavlink_handler.py로 MAVLink 데이터 처리 구현.

gcs.py로 GUI 레이아웃 및 지도 통합.

main.py로 최소화된 실행 코드 작성.

테스트 및 디버깅.
